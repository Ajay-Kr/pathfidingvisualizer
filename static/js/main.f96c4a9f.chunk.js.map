{"version":3,"sources":["img/img.gif","img/dijkstra.gif","img/aStar.gif","img/wall.gif","img/clear.gif","img/nodeVisited.gif","Components/GitRibbon/GitRibbon.jsx","Components/Header/Header.jsx","Components/Node/Node.jsx","algorithms/aStarTest.js","algorithms/dijkstraTest.js","data/infoList.js","Components/Info/Info.jsx","Components/InfoButton/InfoButton.jsx","Components/PathfindingVisualizer/PathfindingVisualizer.jsx","App.jsx","index.js"],"names":["module","exports","GitRibbon","className","target","rel","href","aria-label","width","height","viewBox","aria-hidden","d","fill","Header","src","Image","alt","Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","Component","getNeighbours","node","grid","neighbours","length","push","filter","neighbour","isVisited","neighbourNotInUnvisitedNodes","unvisitedNodes","manhattenDistance","finishNode","Math","abs","dijkstra","startNode","distance","nodes","getNodes","visitedNodesInOrder","sort","a","b","closestNode","shift","Infinity","setTimeout","toast","success","updateUnvisitedNeighbours","warning","unvisitedNeighbours","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","configure","infoList","heading","para","img","img0","img1","link","img2","img3","img4","img5","Info","arguments","state","hide","currentSlideIndex","active","setState","shouldResetIndex","index","lastIndex","InfoList","options","max","scale","reverse","param","toRenderA","onClick","previousSlide","handleChildClick","nextSlide","React","Child","console","log","type","InfoButton","_show","bool","show","bind","PathfindingVisualizer","getInitialGrid","rowCount","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distanceToFinishNode","isNode","mouseIsPressed","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","handleMouseDown","handleMouseLeave","toggleIsRunning","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","clearGrid","nodeClassName","slice","algo","totalDistance","unshift","AStar","nodesInShortestPathOrder","currentNode","getNodesInShortestPathOrder","animate","i","animateShortestPath","clearWalls","visualize","onMouseLeave","map","rowIdx","key","nodeIdx","handleMouseEnter","handleMouseUp","newNode","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f96c4a9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.107062d0.gif\";","module.exports = __webpack_public_path__ + \"static/media/dijkstra.695a9ae8.gif\";","module.exports = __webpack_public_path__ + \"static/media/aStar.3c909078.gif\";","module.exports = __webpack_public_path__ + \"static/media/wall.d00bba2b.gif\";","module.exports = __webpack_public_path__ + \"static/media/clear.a2a60e33.gif\";","module.exports = __webpack_public_path__ + \"static/media/nodeVisited.2f51d3d3.gif\";","import React from \"react\";\r\nimport \"./gitRibbon.css\";\r\n\r\nconst GitRibbon = () => {\r\n\treturn (\r\n\t\t<div className=\"g\">\r\n\t\t\t<a\r\n\t\t\t\tclassName=\"g-a github-corner\"\r\n\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\thref=\"https://github.com/\"\r\n\t\t\t\taria-label=\"View source on GitHub\"\r\n\t\t\t>\r\n\t\t\t\t<svg\r\n\t\t\t\t\tclassName=\"a-svg\"\r\n\t\t\t\t\twidth=\"80\"\r\n\t\t\t\t\theight=\"80\"\r\n\t\t\t\t\tviewBox=\"0 0 250 250\"\r\n\t\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\r\n\t\t\t\t\t<path\r\n\t\t\t\t\t\td=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\r\n\t\t\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\t\t\tclassName=\"octo-arm\"\r\n\t\t\t\t\t></path>\r\n\t\t\t\t\t<path\r\n\t\t\t\t\t\td=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\r\n\t\t\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\t\t\tclassName=\"octo-body\"\r\n\t\t\t\t\t></path>\r\n\t\t\t\t</svg>\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GitRibbon;\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\nimport GitRibbon from \"../GitRibbon/GitRibbon\";\r\nimport Image from \"../../img/img.gif\";\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<div className=\"h\">\r\n\t\t\t<nav className=\"h-navbar\">\r\n\t\t\t\t<header className=\"h-header\">\r\n\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t<img src={Image} className=\"h1-img\" alt=\"\" />\r\n\t\t\t\t\t\tPath<span className=\"h1-stretch\">F</span>inding{\" \"}\r\n\t\t\t\t\t\t<span className=\"h1-span\">Visualizer</span>\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<GitRibbon />\r\n\t\t\t\t</header>\r\n\t\t\t</nav>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    \r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></td>\r\n    );\r\n  }\r\n}\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ntoast.configure();\r\n\r\nexport function AStar(grid, startNode, finishNode) {\r\n\tlet unvisitedNodes = []; //open list\r\n\tlet visitedNodesInOrder = []; //closed list\r\n\tstartNode.distance = 0;\r\n\tunvisitedNodes.push(startNode);\r\n\r\n\twhile (unvisitedNodes.length !== 0) {\r\n\t\tunvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n\t\tlet closestNode = unvisitedNodes.shift();\r\n\t\tif (closestNode === finishNode) {\r\n\t\t\ttoast.success(\"Path Found\");\r\n\t\t\ttoast(`{Node visited: ${visitedNodesInOrder.length}`);\r\n\t\t\treturn visitedNodesInOrder;\r\n\t\t}\r\n\r\n\t\tclosestNode.isVisited = true;\r\n\t\tvisitedNodesInOrder.push(closestNode);\r\n\r\n\t\tlet neighbours = getNeighbours(closestNode, grid);\r\n\t\tfor (let neighbour of neighbours) {\r\n\t\t\tlet distance = closestNode.distance + 1;\r\n\t\t\t//f(n) = g(n) + h(n)\r\n\t\t\tif (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n\t\t\t\tunvisitedNodes.unshift(neighbour);\r\n\t\t\t\tneighbour.distance = distance;\r\n\t\t\t\tneighbour.totalDistance =\r\n\t\t\t\t\tdistance + manhattenDistance(neighbour, finishNode);\r\n\t\t\t\tneighbour.previousNode = closestNode;\r\n\t\t\t} else if (distance < neighbour.distance) {\r\n\t\t\t\tneighbour.distance = distance;\r\n\t\t\t\tneighbour.totalDistance =\r\n\t\t\t\t\tdistance + manhattenDistance(neighbour, finishNode);\r\n\t\t\t\tneighbour.previousNode = closestNode;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tsetTimeout(() => {\r\n\t\ttoast.warning(\"Path Not Found!!!\");\r\n\t}, 11000);\r\n\treturn visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n\tlet neighbours = [];\r\n\tlet { row, col } = node;\r\n\tif (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n\tif (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n\tif (col !== 0) neighbours.push(grid[row][col - 1]);\r\n\tif (row !== 0) neighbours.push(grid[row - 1][col]);\r\n\treturn neighbours.filter(\r\n\t\t(neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n\t);\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n\tfor (let node of unvisitedNodes) {\r\n\t\tif (node.row === neighbour.row && node.col === neighbour.col) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n\tlet x = Math.abs(node.row - finishNode.row);\r\n\tlet y = Math.abs(node.col - finishNode.col);\r\n\treturn x + y;\r\n}\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ntoast.configure();\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n\tstartNode.distance = 0;\r\n\tlet unvisitedNodes = getNodes(grid);\r\n\tlet visitedNodesInOrder = [];\r\n\twhile (unvisitedNodes.length !== 0) {\r\n\t\tunvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n\t\tlet closestNode = unvisitedNodes.shift();\r\n\t\tif (closestNode.isWall) continue;\r\n\t\tif (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\t\tif (closestNode === finishNode) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\ttoast.success(\"Path Found\");\r\n\t\t\t\ttoast(`{Node visited: ${visitedNodesInOrder.length}`);\r\n\t\t\t}, 2000);\r\n\t\t\treturn visitedNodesInOrder;\r\n\t\t}\r\n\t\tclosestNode.isVisited = true;\r\n\t\tvisitedNodesInOrder.push(closestNode);\r\n\t\tupdateUnvisitedNeighbours(closestNode, grid);\r\n\t}\r\n\ttoast.warning(\"Path Not Found\");\r\n}\r\n\r\nfunction getNodes(grid) {\r\n\tlet nodes = [];\r\n\tfor (let row of grid) {\r\n\t\tfor (let node of row) {\r\n\t\t\tnodes.push(node);\r\n\t\t}\r\n\t}\r\n\treturn nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n\tlet unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n\tfor (let unvisitedNeighbour of unvisitedNeighbours) {\r\n\t\tunvisitedNeighbour.distance = node.distance + 1;\r\n\t\tunvisitedNeighbour.previousNode = node;\r\n\t}\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n\tlet neighbours = [];\r\n\tlet { row, col } = node;\r\n\tif (row !== 0) neighbours.push(grid[row - 1][col]);\r\n\tif (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n\tif (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n\tif (col !== 0) neighbours.push(grid[row][col - 1]);\r\n\treturn neighbours\r\n\t\t.filter((neighbour) => !neighbour.isWall)\r\n\t\t.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n","import img0 from \"../img/img.gif\";\r\nimport img1 from \"../img/dijkstra.gif\";\r\nimport img2 from \"../img/aStar.gif\";\r\nimport img3 from \"../img/wall.gif\";\r\nimport img4 from \"../img/clear.gif\";\r\nimport img5 from \"../img/nodeVisited.gif\";\r\n\r\nconst infoList = [\r\n\t{\r\n\t\tid: 0,\r\n\t\theading: \"Path Finding Visualizer\",\r\n\t\tpara: \"Pathfinding algorithms</em></b> are usually an attempt to solve the shortest path problem in graph theory. They try to find the best path given a starting point and ending point based on some predefined criteria.\",\r\n\t\timg: img0,\r\n\t},\r\n\t{\r\n\t\tid: 1,\r\n\t\theading: \"Dijksatra\",\r\n\t\tpara: \"The father of pathfinding algorithms. Guarantees the shortest path\",\r\n\t\timg: img1,\r\n\t\ta: \"More\",\r\n\t\tlink: \"https://www.youtube.com/watch?v=GazC3A4OQTE\",\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\theading: \"A*\",\r\n\t\tpara: \"Arguably the best pathfinding algorithm. Uses heuristics to guarantee the shortest path. Much faster than Dijkstra's Algorithm.\",\r\n\t\timg: img2,\r\n\t\ta: \"More\",\r\n\t\tlink: \"https://www.youtube.com/watch?v=ySN5Wnu88nE\",\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\theading: \"Costs & Weights\",\r\n\t\tpara: \"Algorithms on this application are adapted for a 2D grid, where 90 degree turns have a 'cost' of 1 and movements from a node to another have a 'cost' of 1.\",\r\n\t\timg: \"\",\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\theading: \"Adding Walls\",\r\n\t\tpara: \"Click on the grid to add a wall. Walls are impenetrable, meaning that a path cannot cross through them.\",\r\n\t\timg: img3,\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\theading: \"Clear\",\r\n\t\tpara: \"Clear Grid and Clear Walls clears the grid and the walls respectively\",\r\n\t\timg: img4,\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\theading: \"Nodes Visited\",\r\n\t\tpara: \"At the end of completion of the algorithm, the total number of nodes visited in order to reach the destination pops up at the top right corner of the window. Along with it whether the search resulted in success or not is also indicated via message.\",\r\n\t\timg: img5,\r\n\t},\r\n];\r\n\r\nexport default infoList;\r\n","import React from \"react\";\r\nimport \"./info.css\";\r\nimport Tilt from \"react-tilt\";\r\n// import InfoButton from \"../InfoButton/InfoButton\";\r\nimport InfoList from \"../../data/infoList\";\r\n\r\nclass Info extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper(...arguments);\r\n\t\tthis.state = {\r\n\t\t\thide: false,\r\n\t\t\tcurrentSlideIndex: 0,\r\n\t\t\tactive: false,\r\n\t\t};\r\n\t}\r\n\r\n\thandleChildClick() {\r\n\t\tthis.setState({ hide: true });\r\n\t}\r\n\r\n\tpreviousSlide() {\r\n\t\tconst { currentSlideIndex } = this.state;\r\n\t\tconst shouldResetIndex = currentSlideIndex === 0;\r\n\t\tconst index = shouldResetIndex ? 0 : currentSlideIndex - 1;\r\n\t\tthis.active = shouldResetIndex;\r\n\r\n\t\tthis.setState({\r\n\t\t\tcurrentSlideIndex: index,\r\n\t\t});\r\n\t}\r\n\r\n\tnextSlide() {\r\n\t\tconst lastIndex = InfoList.length - 1;\r\n\t\tconst { currentSlideIndex } = this.state;\r\n\t\tconst shouldResetIndex = currentSlideIndex === lastIndex;\r\n\t\tconst index = shouldResetIndex ? lastIndex : currentSlideIndex + 1;\r\n\t\tthis.active = shouldResetIndex;\r\n\r\n\t\tthis.setState({\r\n\t\t\tcurrentSlideIndex: index,\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { hide } = this.state;\r\n\t\tif (hide) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst toRenderA = (param) => {\r\n\t\t\tif (param) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref={InfoList[this.state.currentSlideIndex].link}\r\n\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{InfoList[this.state.currentSlideIndex].a}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"i\">\r\n\t\t\t\t<Tilt className=\"i-tilt\" options={{ max: 8, scale: 1, reverse: false }}>\r\n\t\t\t\t\t<h2>{`0${InfoList[this.state.currentSlideIndex].id + 1}`}</h2>\r\n\t\t\t\t\t<h3>{InfoList[this.state.currentSlideIndex].heading}</h3>\r\n\t\t\t\t\t<p>{InfoList[this.state.currentSlideIndex].para}</p>\r\n\t\t\t\t\t<img src={InfoList[this.state.currentSlideIndex].img} alt=\"\" />\r\n\t\t\t\t\t{toRenderA(InfoList[this.state.currentSlideIndex].a)}\r\n\t\t\t\t\t{/* {this.state.showMessage && <Info />} */}\r\n\t\t\t\t\t<div className=\"i-nav\">\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tonClick={() => this.previousSlide()}\r\n\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\tInfoList[this.state.currentSlideIndex].id !== 0 ? \"active\" : \"\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t⇤\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<Child onClick={() => this.handleChildClick()} />\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tonClick={() => this.nextSlide()}\r\n\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\tInfoList[this.state.currentSlideIndex].id !==\r\n\t\t\t\t\t\t\t\tInfoList.length - 1\r\n\t\t\t\t\t\t\t\t\t? \"active\"\r\n\t\t\t\t\t\t\t\t\t: \"\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t⇥\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Tilt>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Child extends React.Component {\r\n\trender() {\r\n\t\tconst { onClick } = this.props;\r\n\t\tconsole.log(onClick);\r\n\t\treturn (\r\n\t\t\t<button type=\"button\" className=\"btn info-btn\" onClick={onClick}>\r\n\t\t\t\tClose\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\nimport Info from \"../Info/Info\";\r\nimport \"./infoButton.css\";\r\n\r\nclass InfoButton extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = { show: false };\r\n\t}\r\n\r\n\t_show = (bool) => {\r\n\t\tthis.setState({\r\n\t\t\tshow: bool,\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<span className=\"ib\">\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tclassName=\"btn info-btn\"\r\n\t\t\t\t\tonClick={this._show.bind(null, true)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span className=\"btn-stack\"></span>\r\n\t\t\t\t\t<span className=\"btn-stack\"></span>\r\n\t\t\t\t\t<span className=\"btn-stack\"></span>\r\n\t\t\t\t</button>\r\n\t\t\t\t{this.state.show && <Info />}\r\n\t\t\t\t{/* {this._show.bind(null, false)} */}\r\n\t\t\t</span>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InfoButton;\r\n","import Header from \"../Header/Header\";\r\nimport Node from \"../Node/Node\";\r\nimport React, { Component } from \"react\";\r\nimport { AStar } from \"../../algorithms/aStarTest\";\r\nimport { dijkstra } from \"../../algorithms/dijkstraTest\";\r\nimport \"./PathfindingVisualizer.css\";\r\n// import Info from \"../Info/Info\";\r\nimport InfoButton from \"../InfoButton/InfoButton\";\r\nimport Tilt from \"react-tilt\";\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tgrid: [],\r\n\t\t\tSTART_NODE_ROW: 8,\r\n\t\t\tFINISH_NODE_ROW: 8,\r\n\t\t\tSTART_NODE_COL: 15,\r\n\t\t\tFINISH_NODE_COL: 34,\r\n\t\t\tmouseIsPressed: false,\r\n\t\t\tROW_COUNT: 19,\r\n\t\t\tCOLUMN_COUNT: 50,\r\n\t\t\tisRunning: false,\r\n\t\t\tisStartNode: false,\r\n\t\t\tisFinishNode: false,\r\n\t\t\tisWallNode: false, // xxxxxxx\r\n\t\t\tcurrRow: 0,\r\n\t\t\tcurrCol: 0,\r\n\t\t\t// showInfo: false,\r\n\t\t};\r\n\r\n\t\tthis.handleMouseDown = this.handleMouseDown.bind(this);\r\n\t\tthis.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n\t\tthis.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst grid = this.getInitialGrid();\r\n\t\tthis.setState({ grid });\r\n\t}\r\n\r\n\ttoggleIsRunning() {\r\n\t\tthis.setState({ isRunning: !this.state.isRunning });\r\n\t}\r\n\r\n\t/******************** Set up the initial grid ********************/\r\n\tgetInitialGrid = (\r\n\t\trowCount = this.state.ROW_COUNT,\r\n\t\tcolCount = this.state.COLUMN_COUNT\r\n\t) => {\r\n\t\tconst initialGrid = [];\r\n\t\tfor (let row = 0; row < rowCount; row++) {\r\n\t\t\tconst currentRow = [];\r\n\t\t\tfor (let col = 0; col < colCount; col++) {\r\n\t\t\t\tcurrentRow.push(this.createNode(row, col));\r\n\t\t\t}\r\n\t\t\tinitialGrid.push(currentRow);\r\n\t\t}\r\n\t\treturn initialGrid;\r\n\t};\r\n\r\n\tcreateNode = (row, col) => {\r\n\t\treturn {\r\n\t\t\trow,\r\n\t\t\tcol,\r\n\t\t\tisStart:\r\n\t\t\t\trow === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n\t\t\tisFinish:\r\n\t\t\t\trow === this.state.FINISH_NODE_ROW &&\r\n\t\t\t\tcol === this.state.FINISH_NODE_COL,\r\n\t\t\tdistance: Infinity,\r\n\t\t\tdistanceToFinishNode:\r\n\t\t\t\tMath.abs(this.state.FINISH_NODE_ROW - row) +\r\n\t\t\t\tMath.abs(this.state.FINISH_NODE_COL - col),\r\n\t\t\tisVisited: false,\r\n\t\t\tisWall: false,\r\n\t\t\tpreviousNode: null,\r\n\t\t\tisNode: true,\r\n\t\t};\r\n\t};\r\n\r\n\t/******************** Control mouse events ********************/\r\n\thandleMouseDown(row, col) {\r\n\t\tif (!this.state.isRunning) {\r\n\t\t\tif (this.isGridClear()) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className ===\r\n\t\t\t\t\t\"node node-start\"\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tmouseIsPressed: true,\r\n\t\t\t\t\t\tisStartNode: true,\r\n\t\t\t\t\t\tcurrRow: row,\r\n\t\t\t\t\t\tcurrCol: col,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className ===\r\n\t\t\t\t\t\"node node-finish\"\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tmouseIsPressed: true,\r\n\t\t\t\t\t\tisFinishNode: true,\r\n\t\t\t\t\t\tcurrRow: row,\r\n\t\t\t\t\t\tcurrCol: col,\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tgrid: newGrid,\r\n\t\t\t\t\t\tmouseIsPressed: true,\r\n\t\t\t\t\t\tisWallNode: true,\r\n\t\t\t\t\t\tcurrRow: row,\r\n\t\t\t\t\t\tcurrCol: col,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.clearGrid();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisGridClear() {\r\n\t\tfor (const row of this.state.grid) {\r\n\t\t\tfor (const node of row) {\r\n\t\t\t\tconst nodeClassName = document.getElementById(\r\n\t\t\t\t\t`node-${node.row}-${node.col}`\r\n\t\t\t\t).className;\r\n\t\t\t\tif (\r\n\t\t\t\t\tnodeClassName === \"node node-visited\" ||\r\n\t\t\t\t\tnodeClassName === \"node node-shortest-path\"\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\thandleMouseEnter(row, col) {\r\n\t\tif (!this.state.isRunning) {\r\n\t\t\tif (this.state.mouseIsPressed) {\r\n\t\t\t\tconst nodeClassName = document.getElementById(\r\n\t\t\t\t\t`node-${row}-${col}`\r\n\t\t\t\t).className;\r\n\t\t\t\tif (this.state.isStartNode) {\r\n\t\t\t\t\tif (nodeClassName !== \"node node-wall\") {\r\n\t\t\t\t\t\tconst prevStartNode =\r\n\t\t\t\t\t\t\tthis.state.grid[this.state.currRow][this.state.currCol];\r\n\t\t\t\t\t\tprevStartNode.isStart = false;\r\n\t\t\t\t\t\tdocument.getElementById(\r\n\t\t\t\t\t\t\t`node-${this.state.currRow}-${this.state.currCol}`\r\n\t\t\t\t\t\t).className = \"node\";\r\n\r\n\t\t\t\t\t\tthis.setState({ currRow: row, currCol: col });\r\n\t\t\t\t\t\tconst currStartNode = this.state.grid[row][col];\r\n\t\t\t\t\t\tcurrStartNode.isStart = true;\r\n\t\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className =\r\n\t\t\t\t\t\t\t\"node node-start\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setState({ START_NODE_ROW: row, START_NODE_COL: col });\r\n\t\t\t\t} else if (this.state.isFinishNode) {\r\n\t\t\t\t\tif (nodeClassName !== \"node node-wall\") {\r\n\t\t\t\t\t\tconst prevFinishNode =\r\n\t\t\t\t\t\t\tthis.state.grid[this.state.currRow][this.state.currCol];\r\n\t\t\t\t\t\tprevFinishNode.isFinish = false;\r\n\t\t\t\t\t\tdocument.getElementById(\r\n\t\t\t\t\t\t\t`node-${this.state.currRow}-${this.state.currCol}`\r\n\t\t\t\t\t\t).className = \"node\";\r\n\r\n\t\t\t\t\t\tthis.setState({ currRow: row, currCol: col });\r\n\t\t\t\t\t\tconst currFinishNode = this.state.grid[row][col];\r\n\t\t\t\t\t\tcurrFinishNode.isFinish = true;\r\n\t\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className =\r\n\t\t\t\t\t\t\t\"node node-finish\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setState({ FINISH_NODE_ROW: row, FINISH_NODE_COL: col });\r\n\t\t\t\t} else if (this.state.isWallNode) {\r\n\t\t\t\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n\t\t\t\t\tthis.setState({ grid: newGrid });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thandleMouseUp(row, col) {\r\n\t\tif (!this.state.isRunning) {\r\n\t\t\tthis.setState({ mouseIsPressed: false });\r\n\t\t\tif (this.state.isStartNode) {\r\n\t\t\t\tconst isStartNode = !this.state.isStartNode;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisStartNode,\r\n\t\t\t\t\tSTART_NODE_ROW: row,\r\n\t\t\t\t\tSTART_NODE_COL: col,\r\n\t\t\t\t});\r\n\t\t\t} else if (this.state.isFinishNode) {\r\n\t\t\t\tconst isFinishNode = !this.state.isFinishNode;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisFinishNode,\r\n\t\t\t\t\tFINISH_NODE_ROW: row,\r\n\t\t\t\t\tFINISH_NODE_COL: col,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.getInitialGrid();\r\n\t\t}\r\n\t}\r\n\r\n\thandleMouseLeave() {\r\n\t\tif (this.state.isStartNode) {\r\n\t\t\tconst isStartNode = !this.state.isStartNode;\r\n\t\t\tthis.setState({ isStartNode, mouseIsPressed: false });\r\n\t\t} else if (this.state.isFinishNode) {\r\n\t\t\tconst isFinishNode = !this.state.isFinishNode;\r\n\t\t\tthis.setState({ isFinishNode, mouseIsPressed: false });\r\n\t\t} else if (this.state.isWallNode) {\r\n\t\t\tconst isWallNode = !this.state.isWallNode;\r\n\t\t\tthis.setState({ isWallNode, mouseIsPressed: false });\r\n\t\t\tthis.getInitialGrid();\r\n\t\t}\r\n\t}\r\n\r\n\t/******************** Clear Board/Walls ********************/\r\n\tclearGrid() {\r\n\t\tif (!this.state.isRunning) {\r\n\t\t\tconst newGrid = this.state.grid.slice();\r\n\t\t\tfor (const row of newGrid) {\r\n\t\t\t\tfor (const node of row) {\r\n\t\t\t\t\tlet nodeClassName = document.getElementById(\r\n\t\t\t\t\t\t`node-${node.row}-${node.col}`\r\n\t\t\t\t\t).className;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tnodeClassName !== \"node node-start\" &&\r\n\t\t\t\t\t\tnodeClassName !== \"node node-finish\" &&\r\n\t\t\t\t\t\tnodeClassName !== \"node node-wall\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\r\n\t\t\t\t\t\t\t\"node\";\r\n\t\t\t\t\t\tnode.isVisited = false;\r\n\t\t\t\t\t\tnode.distance = Infinity;\r\n\t\t\t\t\t\tnode.distanceToFinishNode =\r\n\t\t\t\t\t\t\tMath.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n\t\t\t\t\t\t\tMath.abs(this.state.FINISH_NODE_COL - node.col);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (nodeClassName === \"node node-finish\") {\r\n\t\t\t\t\t\tnode.isVisited = false;\r\n\t\t\t\t\t\tnode.distance = Infinity;\r\n\t\t\t\t\t\tnode.distanceToFinishNode = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (nodeClassName === \"node node-start\") {\r\n\t\t\t\t\t\tnode.isVisited = false;\r\n\t\t\t\t\t\tnode.distance = Infinity;\r\n\t\t\t\t\t\tnode.distanceToFinishNode =\r\n\t\t\t\t\t\t\tMath.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n\t\t\t\t\t\t\tMath.abs(this.state.FINISH_NODE_COL - node.col);\r\n\t\t\t\t\t\tnode.isStart = true;\r\n\t\t\t\t\t\tnode.isWall = false;\r\n\t\t\t\t\t\tnode.previousNode = null;\r\n\t\t\t\t\t\tnode.isNode = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tclearWalls() {\r\n\t\tif (!this.state.isRunning) {\r\n\t\t\tconst newGrid = this.state.grid.slice();\r\n\t\t\tfor (const row of newGrid) {\r\n\t\t\t\tfor (const node of row) {\r\n\t\t\t\t\tlet nodeClassName = document.getElementById(\r\n\t\t\t\t\t\t`node-${node.row}-${node.col}`\r\n\t\t\t\t\t).className;\r\n\t\t\t\t\tif (nodeClassName === \"node node-wall\") {\r\n\t\t\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\r\n\t\t\t\t\t\t\t\"node\";\r\n\t\t\t\t\t\tnode.isWall = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/******************** Create Animations ********************/\r\n\tvisualize(algo) {\r\n\t\tif (!this.state.isRunning) {\r\n\t\t\tthis.clearGrid();\r\n\t\t\tthis.toggleIsRunning();\r\n\t\t\tconst { grid } = this.state;\r\n\t\t\tconst startNode =\r\n\t\t\t\tgrid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n\t\t\tconst finishNode =\r\n\t\t\t\tgrid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n\t\t\tlet visitedNodesInOrder;\r\n\t\t\tswitch (algo) {\r\n\t\t\t\tcase \"Dijkstra\":\r\n\t\t\t\t\tvisitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"AStar\":\r\n\t\t\t\t\tvisitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// should never get here\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tconst nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\t\t\tnodesInShortestPathOrder.push(\"end\");\r\n\t\t\tthis.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\t\t}\r\n\t}\r\n\r\n\tanimate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n\t\t\tif (i === visitedNodesInOrder.length) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.animateShortestPath(nodesInShortestPathOrder);\r\n\t\t\t\t}, 10 * i);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconst node = visitedNodesInOrder[i];\r\n\t\t\t\tconst nodeClassName = document.getElementById(\r\n\t\t\t\t\t`node-${node.row}-${node.col}`\r\n\t\t\t\t).className;\r\n\t\t\t\tif (\r\n\t\t\t\t\tnodeClassName !== \"node node-start\" &&\r\n\t\t\t\t\tnodeClassName !== \"node node-finish\"\r\n\t\t\t\t) {\r\n\t\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\r\n\t\t\t\t\t\t\"node node-visited\";\r\n\t\t\t\t}\r\n\t\t\t}, 10 * i);\r\n\t\t}\r\n\t}\r\n\r\n\t/******************** Create path from start to finish ********************/\r\n\tanimateShortestPath(nodesInShortestPathOrder) {\r\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n\t\t\tif (nodesInShortestPathOrder[i] === \"end\") {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.toggleIsRunning();\r\n\t\t\t\t}, i * 50);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconst node = nodesInShortestPathOrder[i];\r\n\t\t\t\t\tconst nodeClassName = document.getElementById(\r\n\t\t\t\t\t\t`node-${node.row}-${node.col}`\r\n\t\t\t\t\t).className;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tnodeClassName !== \"node node-start\" &&\r\n\t\t\t\t\t\tnodeClassName !== \"node node-finish\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\r\n\t\t\t\t\t\t\t\"node node-shortest-path\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}, i * 40);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { grid, mouseIsPressed } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"pfv\">\r\n\t\t\t\t<Header></Header>\r\n\t\t\t\t<div className=\"pfv-btns\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"btn btn-danger\"\r\n\t\t\t\t\t\tonClick={() => this.clearGrid()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tClear Grid\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"btn btn-warning\"\r\n\t\t\t\t\t\tonClick={() => this.clearWalls()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tClear Walls\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t{/* <button type=\"button\" className=\"btn info-btn\" onClick={<Info />}>\r\n\t\t\t\t\t\tInfo\r\n\t\t\t\t\t</button> */}\r\n\t\t\t\t\t<InfoButton />\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\r\n\t\t\t\t\t\tonClick={() => this.visualize(\"Dijkstra\")}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tDijkstra's\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\r\n\t\t\t\t\t\tonClick={() => this.visualize(\"AStar\")}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tA*\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Tilt\r\n\t\t\t\t\tclassName=\"pfv-container\"\r\n\t\t\t\t\toptions={{ max: 2, scale: 1, reverse: false }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<table\r\n\t\t\t\t\t\tclassName=\"grid-container\"\r\n\t\t\t\t\t\tonMouseLeave={() => this.handleMouseLeave()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<tbody className=\"grid\">\r\n\t\t\t\t\t\t\t{grid.map((row, rowIdx) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<tr key={rowIdx}>\r\n\t\t\t\t\t\t\t\t\t\t{row.map((node, nodeIdx) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconst { row, col, isFinish, isStart, isWall } = node;\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Node\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={nodeIdx}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcol={col}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tisFinish={isFinish}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tisStart={isStart}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tisWall={isWall}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, col) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseDown(row, col)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, col) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseEnter(row, col)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp(row, col)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trow={row}\r\n\t\t\t\t\t\t\t\t\t\t\t\t></Node>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</Tilt>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n\t// mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n\tconst newGrid = grid.slice();\r\n\tconst node = newGrid[row][col];\r\n\tif (!node.isStart && !node.isFinish && node.isNode) {\r\n\t\tconst newNode = {\r\n\t\t\t...node,\r\n\t\t\tisWall: !node.isWall,\r\n\t\t};\r\n\t\tnewGrid[row][col] = newNode;\r\n\t}\r\n\treturn newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n\tconst nodesInShortestPathOrder = [];\r\n\tlet currentNode = finishNode;\r\n\twhile (currentNode !== null) {\r\n\t\tnodesInShortestPathOrder.unshift(currentNode);\r\n\t\tcurrentNode = currentNode.previousNode;\r\n\t}\r\n\treturn nodesInShortestPathOrder;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport PathfindingVisualizer from \"./Components/PathfindingVisualizer/PathfindingVisualizer\";\r\nimport Info from \"./Components/Info/Info\";\r\n// import Tilt from \"react-tilt\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<PathfindingVisualizer />\r\n\t\t\t{/* {showInfo(<Info />)} */}\r\n\t\t\t<Info />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}